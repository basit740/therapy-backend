{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/work/fiverr/2021/December/boulmpos/Backups/latest2/src/components/Dashboard/CreateNewVersion/StepTwo/FeelingCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport classes from './FeelingCard.module.css';\nimport Feeling from './Feeling.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FeelingCard = _ref => {\n  _s();\n\n  let {\n    feelings,\n    id,\n    onDragStart,\n    onDragEnd,\n    onDrop,\n    onDragOver,\n    isLoading\n  } = _ref;\n  const [feeling, setFeelings] = useState(feelings);\n\n  const updateFeelings = item => {\n    let prevArray = feelings;\n    let result = prevArray.some(prevItem => {\n      return prevItem.id === item.id;\n    });\n\n    if (result) {\n      console.log(feelings);\n      console.log('already found');\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes['feeling-card'],\n      id: id,\n      onDrop: onDrop,\n      onDragOver: onDragOver,\n      children: [isLoading || feelings.length == 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"data is loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 44\n      }, this), feelings.length > 0 && feelings.map(feeling => {\n        return /*#__PURE__*/_jsxDEV(Feeling, {\n          id: feeling.id,\n          feelingTitle: feeling.issueTitle,\n          onDragStart: onDragStart,\n          onDragEnd: onDragEnd\n        }, feeling.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 8\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(FeelingCard, \"LzF/NsA6M5xrF0jINeoaC6ro414=\");\n\n_c = FeelingCard;\nexport default FeelingCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeelingCard\");","map":{"version":3,"sources":["/Users/apple/Documents/work/fiverr/2021/December/boulmpos/Backups/latest2/src/components/Dashboard/CreateNewVersion/StepTwo/FeelingCard.js"],"names":["React","useState","classes","Feeling","FeelingCard","feelings","id","onDragStart","onDragEnd","onDrop","onDragOver","isLoading","feeling","setFeelings","updateFeelings","item","prevArray","result","some","prevItem","console","log","length","map","issueTitle"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,OAAP,MAAoB,cAApB;;;;AAEA,MAAMC,WAAW,GAAG,QAQd;AAAA;;AAAA,MARe;AACpBC,IAAAA,QADoB;AAEpBC,IAAAA,EAFoB;AAGpBC,IAAAA,WAHoB;AAIpBC,IAAAA,SAJoB;AAKpBC,IAAAA,MALoB;AAMpBC,IAAAA,UANoB;AAOpBC,IAAAA;AAPoB,GAQf;AACL,QAAM,CAACC,OAAD,EAAUC,WAAV,IAAyBZ,QAAQ,CAACI,QAAD,CAAvC;;AAEA,QAAMS,cAAc,GAAIC,IAAD,IAAU;AAChC,QAAIC,SAAS,GAAGX,QAAhB;AAEA,QAAIY,MAAM,GAAGD,SAAS,CAACE,IAAV,CAAgBC,QAAD,IAAc;AACzC,aAAOA,QAAQ,CAACb,EAAT,KAAgBS,IAAI,CAACT,EAA5B;AACA,KAFY,CAAb;;AAGA,QAAIW,MAAJ,EAAY;AACXG,MAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAZ;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA;AACA;AACD,GAXD;;AAYA,sBACC;AAAA,2BACC;AACC,MAAA,SAAS,EAAEnB,OAAO,CAAC,cAAD,CADnB;AAEC,MAAA,EAAE,EAAEI,EAFL;AAGC,MAAA,MAAM,EAAEG,MAHT;AAIC,MAAA,UAAU,EAAEC,UAJb;AAAA,iBAMEC,SAAS,IAAKN,QAAQ,CAACiB,MAAT,IAAmB,CAAnB,iBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANxC,EAQEjB,QAAQ,CAACiB,MAAT,GAAkB,CAAlB,IACAjB,QAAQ,CAACkB,GAAT,CAAcX,OAAD,IAAa;AACzB,4BACC,QAAC,OAAD;AAEC,UAAA,EAAE,EAAEA,OAAO,CAACN,EAFb;AAGC,UAAA,YAAY,EAAEM,OAAO,CAACY,UAHvB;AAIC,UAAA,WAAW,EAAEjB,WAJd;AAKC,UAAA,SAAS,EAAEC;AALZ,WACMI,OAAO,CAACN,EADd;AAAA;AAAA;AAAA;AAAA,gBADD;AASA,OAVD,CATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADD,mBADD;AAyBA,CAhDD;;GAAMF,W;;KAAAA,W;AAiDN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react';\nimport classes from './FeelingCard.module.css';\nimport Feeling from './Feeling.js';\n\nconst FeelingCard = ({\n\tfeelings,\n\tid,\n\tonDragStart,\n\tonDragEnd,\n\tonDrop,\n\tonDragOver,\n\tisLoading,\n}) => {\n\tconst [feeling, setFeelings] = useState(feelings);\n\n\tconst updateFeelings = (item) => {\n\t\tlet prevArray = feelings;\n\n\t\tlet result = prevArray.some((prevItem) => {\n\t\t\treturn prevItem.id === item.id;\n\t\t});\n\t\tif (result) {\n\t\t\tconsole.log(feelings);\n\t\t\tconsole.log('already found');\n\t\t\treturn;\n\t\t}\n\t};\n\treturn (\n\t\t<>\n\t\t\t<div\n\t\t\t\tclassName={classes['feeling-card']}\n\t\t\t\tid={id}\n\t\t\t\tonDrop={onDrop}\n\t\t\t\tonDragOver={onDragOver}\n\t\t\t>\n\t\t\t\t{isLoading || (feelings.length == 0 && <p>data is loading...</p>)}\n\n\t\t\t\t{feelings.length > 0 &&\n\t\t\t\t\tfeelings.map((feeling) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Feeling\n\t\t\t\t\t\t\t\tkey={feeling.id}\n\t\t\t\t\t\t\t\tid={feeling.id}\n\t\t\t\t\t\t\t\tfeelingTitle={feeling.issueTitle}\n\t\t\t\t\t\t\t\tonDragStart={onDragStart}\n\t\t\t\t\t\t\t\tonDragEnd={onDragEnd}\n\t\t\t\t\t\t\t></Feeling>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t</div>\n\t\t</>\n\t);\n};\nexport default FeelingCard;\n"]},"metadata":{},"sourceType":"module"}